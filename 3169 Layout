#include <stdio.h>
#include <iostream>
using namespace std;

#define INF 1e9
#define MAXN 1024
#define MAXM 10024
int d[MAXN];
int AL[MAXM], BL[MAXM], DL[MAXM];
int AD[MAXM], BD[MAXM], DD[MAXM];
int i, j, N, ML, MD;
bool updated;

void update(int& x, int y) {
	if (x > y) {
		updated = true;
		x = y;
	}
}
void bellmanford() {
	for (i = 0; i <= N; i++) {
		updated = false;
		//three inequations
		//d[j + 1] + 0 >= d[j];  d[j] - d[j + 1] <= 0
		for (j = 0; j + 1 < N; j++) {
			if (d[j + 1] < INF)
				update(d[j], d[j + 1]);
		}
		//d[BL] - d[AL] <= DL
		for (j = 0; j < ML; j++) {
			if (d[AL[j] - 1] < INF)
				update(d[BL[j] - 1], d[AL[j] - 1] + DL[j]);
		}
		//BD > AD
		//d[AD] - d[BD] <= -DD
		for (j = 0; j < MD; j++) {
			if (d[BD[j] - 1] < INF)
				update(d[AD[j] - 1], d[BD[j] - 1] - DD[j]);
		}
	}
}

int main() {
	scanf("%d %d %d", &N, &ML, &MD);
	for (i = 0; i < ML; i++) {
		scanf("%d %d %d", &AL[i], &BL[i], &DL[i]);
	}
	for (i = 0; i < MD; i++) {
		scanf("%d %d %d", &AD[i], &BD[i], &DD[i]);
	}
	fill(d, d + N, 0);
	//find negative loop
	bellmanford(); 
	if (updated) {
		printf("-1");
		return 0;
	}
	
	fill(d, d + N, INF);
	d[0] = 0;
	bellmanford();
	int ans = d[N - 1];
	//remained infinite value means the node is unreachable, the initial value of all node is INF. 
	if (ans == INF)
		ans = -2;
	printf("%d", ans);
	return 0;
}

负环的定义是不是会改变的
搜索负环的概念 但是搜索出来的负环的检测 而没有负环的定义
在这个题目中 三个for循环代表这三个不等式
对该输入
3 2 1
1 2 2
1 3 2
2 3 100
输出为-1 即这个算法认为有负环

而注释掉第一个for循环后（对应不等式d[i+1] + 0 >= d[i]） 这份代码变成了普通的bellman ford
输出为2 即没有负环 第一个节点到第三个节点的最短路为2

发现如书上所说 bellmanford的思想的确是可以转化成不等式的
那么 是不等式定义了最短路 还是最短路对应了不等式
对于一条路径不等式是特定条件 恰好取等号 因为路径只是一条
但是在这里 不等式d[i+1] + 0 >= d[i];的出现 反过来定义了负环?


