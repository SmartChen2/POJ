package com.company;
import java.io.BufferedInputStream;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        int n = sc.nextInt();
        int[][] arr = new int[n][3];


        for (int i = 0; i < n; i++) {
            arr[i][0] = sc.nextInt();
            arr[i][1] = sc.nextInt();
            arr[i][2] = i;
        }
        sort(arr, new int[]{0});

        int ans = 0;
        PriorityQueue<Noode> pq = new PriorityQueue<Noode>(n + 1);

        int[] timearr = new int[n];

        for (int i = 0; i < n; i++) {
            Noode no = new Noode();
            if (!pq.isEmpty() && pq.peek().val < arr[i][0]){//满足 不用增添新的
                no.pos = pq.peek().pos;
                pq.poll();
            }
            else {//增添新的
                ans++;
                no.pos = ans;
            }
            timearr[arr[i][2]] = no.pos;
            no.val = arr[i][1];
            pq.add(no);//新来的
        }
        System.out.println(ans);
        for (int i = 0; i < timearr.length; i++) {
            System.out.println(timearr[i]);

        }
    }

    public static void sort(int[][] ob, final int[] order) {
        Arrays.sort(ob, new Comparator<Object>() {
            public int compare(Object o1, Object o2) {
                int[] one = (int[]) o1;
                int[] two = (int[]) o2;
                for (int i = 0; i < order.length; i++) {
                    int k = order[i];
                    if (one[k] > two[k]) {
                        return 1;
                    } else if (one[k] < two[k]) {
                        return -1;
                    } else {
                        continue;  //如果按一条件比较结果相等，就使用第二个条件进行比较。
                    }
                }
                return 0;
            }
        });
    }
}

class Noode implements Comparable<Noode> {
    int val, pos;
    public int compareTo(Noode n) {
        return this.val - n.val;
    }
}
