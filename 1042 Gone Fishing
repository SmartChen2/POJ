package com.company;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        Reader.init( System.in );

        int N = Reader.nextInt();
        while (N > 0) {
            int h = Reader.nextInt();
            h *= 12;
            int[] f = new int[N], d = new int[N], t = new int[N - 1], at = new int[N - 1];

            for (int i = 0; i < f.length; i++)
                f[i] = Reader.nextInt();
            for (int i = 0; i < f.length; i++)
                d[i] = Reader.nextInt();
            for (int i = 0; i < t.length; i++)
                t[i] = Reader.nextInt();

            at[0] = t[0];
            for (int i = 1; i < t.length; i++)
                at[i] = t[i] + at[i - 1];

            int[][] dp = new int[N][h + 1];
            int[][][] map = new int[N][h + 1][2];
            int[][] temp = new int[N][h + 1];
            for (int i = 0; i <= h; i++) {
                map[0][i][0] = i;
            }

            //temp表示仅在i鱼塘掉j时间鱼所得到的鱼
            for (int i = 0; i < N; i++) {
                for (int j = 1; j <= h; j++) {
                    temp[i][j] = f[i] + temp[i][j - 1];
                    f[i] -= d[i];
                    if (f[i] < 0)
                        f[i] = 0;
                }
            }

            for (int i = 0; i <= h; i++) {
                dp[0][i] = temp[0][i];
            }

            int ans = dp[0][h];
            for (int i = 1; i < N; i++) {
                for (int j = at[i - 1] + 1; j <= h; j++) {
                    for (int k = 0; k <= j - at[i - 1]; k++) {
                        //用k的时间钓鱼, t[i - 1]表示从第i - 1 个鱼塘到下一个鱼塘用的时间, j - k - t[i - 1] 的时间是在前面的鱼塘钓鱼的时间
                        if (dp[i - 1][j - k - t[i - 1]] + temp[i][k] > dp[i][j]) {
                            dp[i][j] = dp[i - 1][j - k - t[i - 1]] + temp[i][k];
                            map[i][j][0] = k;//表示在这个鱼塘掉了多少分钟
                            map[i][j][1] = j - k - t[i - 1];//表示在上一个鱼塘掉了多少分钟
                        }
                        ans = Math.max(ans, dp[i][j]);
                    }
                }
            }

            int x = 0, y = h;

            for (int i = 0; i < N; i++) {
                if (ans == dp[i][y]) {
                    x = i;
                    break;
                }
            }
            int[] time = new int[N];
            for (int i = x; i >= 0; i--) {
                time[i] = map[i][y][0] * 5;
                y = map[i][y][1];
            }

            for (int i = 0; i < N - 1; i++) {
                System.out.print(time[i] + ", ");
            }
            System.out.println(time[N - 1]);
            System.out.print("Number of fish expected: ");
            System.out.println(ans);
            System.out.println();
            N = Reader.nextInt();
        }
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }
    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }
    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
}
