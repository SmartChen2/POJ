package com.company;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        Reader.init( System.in );
        int N = Reader.nextInt();
        int cas = 0;
        while (N > 0) {
            int[][] arr = new int[6 * N][3];
            long[] dp = new long[6 * N];

            for (int i = 0; i < N; i++) {

                int x = Reader.nextInt();
                int y = Reader.nextInt();
                int z = Reader.nextInt();

                arr[i * 6][0] = x;
                arr[i * 6][1] = y;
                arr[i * 6][2] = z;
                arr[i * 6 + 1][0] = y;
                arr[i * 6 + 1][1] = x;
                arr[i * 6 + 1][2] = z;

                arr[i * 6 + 2][0] = z;
                arr[i * 6 + 2][1] = x;
                arr[i * 6 + 2][2] = y;
                arr[i * 6 + 3][0] = x;
                arr[i * 6 + 3][1] = z;
                arr[i * 6 + 3][2] = y;

                arr[i * 6 + 4][0] = y;
                arr[i * 6 + 4][1] = z;
                arr[i * 6 + 4][2] = x;
                arr[i * 6 + 5][0] = z;
                arr[i * 6 + 5][1] = y;
                arr[i * 6 + 5][2] = x;
            }

            Arrays.sort(arr, new Comparator<int[]>() {
                @Override
                public int compare(int[] o1, int[] o2) {
                    if (o1[0] - o2[0] != 0)
                        return o1[0] - o2[0];
                    if (o1[1] - o2[1] != 0)
                        return o1[1] - o2[1];
                    return o1[2] - o2[2];
                }
            });
            long ans = 0;
            for (int i = 0; i < arr.length; i++) {
                dp[i] = arr[i][2];
                for (int j = 0; j <= i; j++) {
                    if (arr[i][0] > arr[j][0] && arr[i][1] > arr[j][1])
                        dp[i] = Math.max(dp[i], dp[j] + arr[i][2]);
                }
                ans = Math.max(ans, dp[i]);
            }
            cas++;
            System.out.print("Case " + cas);
            System.out.print(": maximum height = ");
            System.out.println(ans);
            N = Reader.nextInt();
        }
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;
    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }
    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }
    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
}
