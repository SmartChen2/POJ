package com.company;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        int M, N;
        Reader.init(System.in);
        M = Reader.nextInt();
        N = Reader.nextInt();
        int[][] map = new int[M][N];
        long[][] dp = new long[M][N];
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                map[i][j] = Reader.nextInt();
                dp[i][j] = map[i][j];
            }
        }

        for (int i = 1; i < M; i++) {
            dp[i][0] += dp[i - 1][0];
            for (int j = 1; j < N; j++) {
                dp[i][j] += Math.min(dp[i][j - 1], dp[i - 1][j]);
            }
            for (int j = N - 2; j >= 0; j--) {
                dp[i][j] = Math.min(dp[i][j], map[i][j] + dp[i][j + 1]);
            }
        }
        long min = Long.MAX_VALUE;
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            if (min > dp[M - 1][i]) {
                min = dp[M - 1][i];
                cnt = i;
            }
        }
        int[] arr = new int[M * N + 1];
        int count = 0;
        int x = M - 1;
        int x1, y1, y2, y;
        y = cnt;
        long v1, v2, v3;
        while ( x >= 0) {
            arr[count++] = y + 1;
            if (x == 0)
                break;
            x1 = x - 1;
            y1 = y - 1;
            y2 = y + 1;
            v3 = dp[x1][y];
            if (y1 < 0)
                v1 = Long.MAX_VALUE;
            else
                v1 = dp[x][y1];

            if (y2 >= N)
                v2 = Long.MAX_VALUE;
            else
                v2 = dp[x][y2];

            long minv = Math.min(v1, Math.min(v2, v3));
            if (v3 == minv) {
                x--;
                continue;
            }
            if (v1 == minv) {
                y = y1;
                continue;
            }
            if (v2 == minv) {
                y = y2;
                continue;
            }
        }
        for (int i = count - 1; i >= 0; i--) {
            System.out.println(arr[i]);
        }
    }
}

class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

}
