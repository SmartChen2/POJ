package com.company;
import java.io.BufferedInputStream;
import java.util.Scanner;

public class Main {
    private static int throwcnt, min;
    public static void main(String[] args) {
        // write your code here

        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        int n, m, sx, sy;
        m = sc.nextInt();
        n = sc.nextInt();
        int[][] map;
        int[][] d = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

        while (n > 0 && m > 0) {
            min = Integer.MAX_VALUE;
            map = new int[n][m];
            throwcnt = 0;
            sx = 0;
            sy = 0;
            //get input
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    map[i][j] = sc.nextInt();
                    if (map[i][j] == 2) {
                        sx = i;
                        sy = j;
                        map[i][j] = 0;
                    }
                }
            }


            DFS(map, d, sx, sy);

            if (min != Integer.MAX_VALUE)
                System.out.println(min);
            else
                System.out.println(-1);
            m = sc.nextInt();
            n = sc.nextInt();
        }
    }
    public static void DFS(int[][] map, int[][] d, int x, int y) {
        int xx, yy;
        boolean flag;
        if (throwcnt >= 10)
            return;
        for (int i = 0; i < d.length; i++) {
            flag = false;
            xx = x + d[i][0];
            yy = y + d[i][1];
            if (xx < 0 || yy < 0 || xx >= map.length || yy >= map[0].length)
                continue;//不能往这里扔
            if (map[xx][yy] == 1)
                continue;//不能往这里扔
            if(map[xx][yy] == 3) {//reach the goal
                if (throwcnt + 1 < min)
                    min = throwcnt + 1;
                return;
            }

            do {
                xx += d[i][0];
                yy += d[i][1];
                if (xx < 0 || yy < 0 || xx >= map.length || yy >= map[0].length) {
                    flag = true;//出界了
                    break;
                }
                if(map[xx][yy] == 3) {//reach the goal
                    if (throwcnt + 1 < min)
                        min = throwcnt + 1;
                    return;
                }
            } while (map[xx][yy] != 1);

            if(flag) continue;
            throwcnt++;
            map[xx][yy] = 0;
            DFS(map, d, xx - d[i][0], yy - d[i][1]);
            throwcnt--;
            map[xx][yy] = 1;
        }
    }
}
