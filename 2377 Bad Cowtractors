package com.company;

import java.io.BufferedInputStream;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {
    static int[] par, rank;
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        int N, M;
        N = sc.nextInt();
        M = sc.nextInt();
        par = new int[N];
        rank = new int[N];
        int[][] path = new int[M][3];
        for (int i = 0; i < N; i++) {
            par[i] = i;
        }
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 2; j++) {
                path[i][j] = sc.nextInt() - 1;
            }
            path[i][2] = -sc.nextInt();
        }
        Arrays.sort(path, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[2] - o2[2];
            }
        });
        //kruskal
        long ans = 0;
        {
            for (int i = 0; i < M; i++) {
                int x = path[i][0], y = path[i][1];
                if (!same(x, y)) {
                    union(x, y);
                    ans += path[i][2];
                }
            }
        }
        int p = find(0);
        for (int i = 1; i < N; i++) {
            if (find(i) != p)
                ans = 1;
        }
        System.out.println(-ans);
    }
    public static boolean same(int x, int y) {
        return find(x) == find(y);
    }
    public static int find(int x) {
        if (x == par[x])
            return x;
        return par[x] = find(par[x]);
    }
    public static void union(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) return;
        if (rank[x] > rank[y]) {
            par[y] = x;
            return;
        }
        par[x] = y;
        if (rank[x] == rank[y]) {
            rank[y]++;
        }
    }
}
