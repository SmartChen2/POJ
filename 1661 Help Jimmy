package com.company;

import java.io.BufferedInputStream;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        int t = sc.nextInt();
        int N, X, Y, MAX;
        final int MAXVAL = Integer.MAX_VALUE - 100000;
        for (int tt = 0; tt < t; tt++) {
            N = sc.nextInt();
            X = sc.nextInt();
            Y = sc.nextInt();
            MAX = sc.nextInt();

            int[][] arr = new int[N + 1][3];
            int[][] dp = new int[N + 1][2];//0是到左边的时间 1是到右边的时间
            boolean[][] flag = new boolean[N + 1][2];
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < 3; j++) {
                    arr[i][j] = sc.nextInt();
                    dp[i][0] = MAXVAL;
                    dp[i][1] = MAXVAL;
                }
            }
            dp[N][0] = MAXVAL;
            dp[N][1] = MAXVAL;
            arr[N][0] = X;
            arr[N][1] = X;
            arr[N][2] = Y;
            Arrays.sort(arr, new Comparator<int[]>() {
                @Override
                public int compare(int[] o1, int[] o2) {
                    if (o2[2] - o1[2] != 0)
                        return o2[2] - o1[2];
                    else
                        return o1[0] - o2[0];
                }
            });
            int cnt;
            for (cnt = 0; cnt <= N; cnt++) {
                if (arr[cnt][2] == Y)//找到初始位置
                    if (arr[cnt][0] == X && X == arr[cnt][1])
                        break;
            }
            dp[cnt][0] = 0;
            dp[cnt][1] = 0;
            for (int j = cnt + 1; j <= N; j++) {//i is upon, j is down. the j th platform is under judging.
                for (int i = cnt; i < j; i++) {
                    int height = arr[i][2] - arr[j][2];
                    if (height <= MAX) {//Will not fall to death
                        //fall from ith left side
                        if (!flag[i][0])
                            if (arr[j][0] <= arr[i][0] && arr[i][0] <= arr[j][1]) {
                                flag[i][0] = true;
                                dp[j][0] = Math.min(dp[j][0], height + arr[i][0] - arr[j][0] + dp[i][0]);
                                dp[j][1] = Math.min(dp[j][1], height + arr[j][1] - arr[i][0] + dp[i][0]);
                            }
                        //right side
                        if (!flag[i][1])
                            if (arr[j][0] <= arr[i][1] && arr[i][1] <= arr[j][1]) {
                                flag[i][1] = true;
                                dp[j][0] = Math.min(dp[j][0], height + arr[i][1] - arr[j][0] + dp[i][1]);
                                dp[j][1] = Math.min(dp[j][1], height + arr[j][1] - arr[i][1] + dp[i][1]);
                            }
                    }
                }
            }
            int ans = MAXVAL;

            for (int i = 0; i <= N; i++) {
                if (arr[i][2] <= MAX) {
                    if (!flag[i][0])
                        ans = Math.min(ans, arr[i][2] + dp[i][0]);
                    if (!flag[i][1])
                        ans = Math.min(ans, arr[i][2] + dp[i][1]);
                }
            }
            System.out.println(ans);
        }
    }
}
