package com.company;

import java.io.BufferedInputStream;
import java.util.Scanner;

public class Main {
    static int M, N, count;
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
         M = sc.nextInt();
         N = sc.nextInt();
        int[][] map = new int[M][N];
        long[][] dp = new long[M][N];
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                map[i][j] = sc.nextInt();
                dp[i][j] = map[i][j];
            }
        }

        for (int i = 1; i < M; i++) {
            dp[i][0] += dp[i - 1][0];
            for (int j = 1; j < N; j++) {
                dp[i][j] += Math.min(dp[i][j - 1], dp[i - 1][j]);
            }
            for (int j = N - 2; j >= 0; j--) {
                dp[i][j] = Math.min(dp[i][j], map[i][j] + dp[i][j + 1]);
            }
        }
        long min = Long.MAX_VALUE;
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            if (min > dp[M - 1][i]) {
                min = dp[M - 1][i];
                cnt = i;
            }
        }
        int[] arr = new int[M * N + 1];
        count = 0;
        DFS(dp,M - 1, cnt, arr);
        for (int i = count - 1; i >= 0; i--) {
            System.out.println(arr[i]);
        }

    }
    public static void DFS(long[][] map, int x, int y, int[] arr) {
        arr[count++] = y + 1;
        if (x == 0)
            return;
        int x1 = x - 1;
        int y1 = y - 1;
        int y2 = y + 1;
        long v3 = map[x1][y];
        long v1, v2;
        if (y1 < 0) {
             v1 = Long.MAX_VALUE;
        }
        else{
             v1 = map[x][y1];
        }
        if (y2 >= N) {
             v2 = Long.MAX_VALUE;
        }
        else {
             v2 = map[x][y2];
        }

        long min = Math.min(v1, Math.min(v2, v3));
        if (v3 == min) {
            DFS(map, x - 1, y, arr);
            return;
        }
        if (v1 == min) {
            DFS(map, x, y1, arr);
            return;
        }
        if (v2 == min) {
            DFS(map, x, y2, arr);
            return;
        }
    }
}
