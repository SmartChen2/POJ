package com.company;

import java.io.BufferedInputStream;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        int N = sc.nextInt();
        int[][] data = new int[N][2];
        int filter = 0, bonus = 0;
        int n, m;
        for (int i = 0; i < N; i++) {
            n = sc.nextInt();
            m = sc.nextInt();
            if (n <= 0 && m <= 0) {
                filter++;
                continue;
            }
            if (n >= 0 && m >= 0) {
                bonus += (n + m);
                filter++;
                continue;
            }
            data[i - filter][0] = n;
            data[i - filter][1] = m;
        }
        N -= filter;
        int max = 0;

        Queue<Node> q = new LinkedList<Node>();

        for (int k = 0; k < N; k++) {
            Node node = new Node();
            node.data0 = data[k][0];
            node.data1 = data[k][1];
            node.index = k + 1;
            q.add(node);
            if (node.data0 >= 0 && node.data1 >= 0)
                max = Math.max(max, (node.data0 + node.data1));
            while (q.peek() != null) {
                node = q.poll();
                for (int i = node.index; i < N; i++) {
                    Node next = new Node();
                    next.data0 = node.data0 + data[i][0];
                    next.data1 = node.data1 + data[i][1];
                    next.index = i + 1;
                    q.add(next);
                    if (next.data0 >= 0 && next.data1 >= 0)
                        max = Math.max(max, (next.data0 + next.data1));
                }
            }
        }

        System.out.println(max + bonus);
    }
}

class Node{
    int data0, data1;
    int index;
}
