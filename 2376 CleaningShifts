package com.company;
import java.io.BufferedInputStream;
import java.util.*;

public class Main {
    static int N, T;
    public static void main(String[] args) {
        // write your code here

        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        N = sc.nextInt();
        T = sc.nextInt();
        int[][] arr = new int[N][2];
        int day;
        int i;
        for (i = 0; i < N; i++) {
            arr[i][0] = sc.nextInt();
            arr[i][1] = sc.nextInt();
        }
        //now resort the array by double parameters hashmap.

        Map<Integer, Integer> map = new HashMap();
        //push i(to map.getkey), element[i](map.getvalue())? to hashmap
        for (i = 0; i < N; i++)
            map.put(i, arr[i][0]);

        //将map.entrySet()转换成list
        List<Map.Entry<Integer, Integer>> list = new ArrayList(map.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {
            //引入了双参数 因为是对哈希表的两个参数进行排列 必须要实现compare接口
            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
                return o1.getValue().compareTo(o2.getValue());
            }
        });

        int[] resett = new int[N];
        i = 0;
        for (Map.Entry<Integer, Integer> mapping : list) {
            resett[i] = mapping.getKey();//getkey get the rearrange sequence of i
            i++;
        }//Put the resorted element to resett[] to reserve



        int newday, cows;
        cows = 0;
        i = 0;
        day = 1;
        while (i <= N) {

            if (i >= N || arr[resett[i]][0] > day) {//ERR判出有三个条件 最后的牛够不着终点 一开始/中间的牛不能和前面的牛衔接
                System.out.println(-1);
                return;
            }
            //break out, the earliest one is later than the day
            cows++;
            newday = -1;
            while (i < N && arr[resett[i]][0] <= day) {//find the largest range.
                if (newday < arr[resett[i]][1])
                    newday = arr[resett[i]][1];
                i++;
            }
            if(newday >= T) {
                System.out.println(cows);
                return;
            }
            day = newday + 1;
        }
    }
}
