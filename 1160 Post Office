package com.company;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        Reader.init( System.in );
        int N = Reader.nextInt();//300 * 30 = 10000
        int P = Reader.nextInt();
        int[] arr = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            arr[i] = Reader.nextInt();
        }
        int[][] temp = new int[N + 1][N + 1], dp = new int[N + 1][P + 1];
        for (int i = 1; i <= N; i++) {
            for (int j = i; j <= N; j++) {
                int mid = (i + j) / 2;
                int sum = 0;
                for (int k = i; k <= j; k++) {
                    sum += Math.abs(arr[k] - arr[mid]);
                }
                temp[i][j] = sum;
            }
        }

        for (int i = 2; i <= N; i++) {
            dp[i][1] = temp[1][i];
            for (int j = 2; j <= P && j < i; j++) {
                dp[i][j] = Integer.MAX_VALUE - 1000000;
                for (int k = 1; k < i; k++) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - k][j - 1] + temp[i - k + 1][i]);
                }
            }
        }
        System.out.println(dp[N][P]);
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }
    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }
    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
}
