package com.company;
import java.io.BufferedInputStream;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;


public class Main {

    public static void main(String[] args) {
        // write your code here
        int N, M, R;
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        N = sc.nextInt();
        M = sc.nextInt();
        R = sc.nextInt();
        int[][] arr = new int[M][3];
        //绘制一个NXM的表格 里面放的是时间和收入
        long[] DP = new long[N + 1];

        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < 3; j++) {
                arr[i][j] = sc.nextInt();
            }
        }
        sort(arr, new int[]{0});
        //arr[][0] starting time, arr[][1] ending time, efficiency.
        //策略是每个时间段都可以选择挤牛奶或者不挤牛奶 以此DP

        int j;
        int l = 0;
        long max = 0;

        for (int i = 0; i < N + 1; i++) {
            //j the iteration can be optimized by using left side helper j = l
            for (j = l; j < M; j++) {
                if(arr[j][0] == i) {//starting time of arr must be equal to DP's starting time
                    //do / not do
                    
                    if (arr[j][1] + R <= N) {
                        //do
                        if (DP[arr[j][1] + R] < DP[i] + arr[j][2]) {
                            DP[arr[j][1] + R] = DP[i] + arr[j][2];
                            if (max < DP[arr[j][1] + R])
                                max = DP[arr[j][1] + R];
                        }

                    }
                    if (arr[j][1] <= N && arr[j][1] + R > N) {
                        if (DP[arr[j][1]] < DP[arr[j][0]] + arr[j][2]) {
                            DP[arr[j][1]] = DP[arr[j][0]] + arr[j][2];
                            if (max < DP[arr[j][1]])
                                max = DP[arr[j][1]];
                        }
                    }
                }
                if (arr[j][0] > i)
                    break;
            }
            if(i + 1 <= N)
                //not do, let DP[i + 1] be the same as the current condition.
                if (DP[i + 1] < DP[i]){
                    DP[i + 1] = DP[i];
                }
            l = j;
        }
        System.out.println(max);
    }
    public static void sort(int[][] ob, final int[] order) {
        Arrays.sort(ob, new Comparator<Object>() {
            public int compare(Object o1, Object o2) {
                int[] one = (int[]) o1;
                int[] two = (int[]) o2;
                for (int i = 0; i < order.length; i++) {
                    int k = order[i];
                    if (one[k] > two[k]) {
                        return 1;
                    } else if (one[k] < two[k]) {
                        return -1;
                    } else {
                        continue;  //如果按一条件比较结果相等，就使用第二个条件进行比较。
                    }
                }
                return 0;
            }
        });
    }
}
