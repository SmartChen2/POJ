package com.company;

import java.io.BufferedInputStream;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        int n = sc.nextInt();
        Node[] nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
            nodes[i].start = sc.nextInt();
            nodes[i].end = sc.nextInt();
            nodes[i].pos = i;
        }
        sort(nodes);
        PriorityQueue<Node> q = new PriorityQueue<>(n, new Comparator<Node>(){
            @Override
            public int compare(Node o1, Node o2) {
                return o1.end - o2.end;
            }
        });
        nodes[0].pos = 1;
        q.add(nodes[0]);
        int[] posarr = new int[n];

        posarr[0] = 1;
        int res = 1;

        for (int i = 1; i < nodes.length; i++) {
            Node now = nodes[i];
            Node pre = q.peek();
            if (pre.end < now.start) {
                q.poll();
                posarr[now.pos] = posarr[pre.pos];
            }
            else  {
                res++;
                posarr[now.pos] = res;
            }
            q.add(nodes[i]);
        }

        System.out.println(res);
        for (int i = 0; i < nodes.length; i++) {
            System.out.println(posarr[i]);
        }
    }

    public static void sort(Node[] ob) {
        Arrays.sort(ob, new Comparator<Object>() {
            public int compare(Object o1, Object o2) {
                Node one = (Node) o1;
                Node two = (Node) o2;
                if (one.start > two.start)
                    return  1;
                else if (one.start < two.start)
                    return -1;
                else {
                    if (one.end > two.end)
                        return 1;
                    else if (one.end < two.end)
                        return -1;
                    return 0;
                }
            }
        });
    }
}

class Node {
    int start, end, pos;
}
