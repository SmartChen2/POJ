package com.company;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        Reader.init(System.in);
        int N = Reader.nextInt();
        int L = Reader.nextInt();
        int[][] arr = new int[N][2];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < 2; j++) {
                arr[i][j] = Reader.nextInt();
            }
        }
        Arrays.sort(arr, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o2[1] - o1[1] != 0)
                    return o2[1] - o1[1];
                else
                    return o1[0] - o2[0];
                //if it is only return o2[1] - o1[1]; WA
            }
        });

        int[][] Larr = new int[L][2];
        for (int i = 0; i < L; i++) {
            for (int j = 0; j < 2; j++) {
                Larr[i][j] = Reader.nextInt();
            }
        }
        Arrays.sort(Larr, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o2[0] - o1[0];
            }
        });

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(200, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        int ans = 0;
        int k = 0;
        for (int i = 0; i < L; i++) {
            for (int j = 0; j < Larr[i][1]; j++) {
                for (; k < N; k++) {//把能判定的都装进去
                    if (Larr[i][0] > arr[k][1]) {
                        //j = Larr[i][0];  WA
                        break;
                    }
                    if (arr[k][0] <= Larr[i][0])
                        pq.add(arr[k][0]);
                }

                while (!pq.isEmpty()) {
                    if (pq.peek() > Larr[i][0])
                        pq.poll();
                    else
                        break;
                }
                if (!pq.isEmpty()) {
                    ans++;
                    pq.poll();
                }
            }
        }
        System.out.println(ans);
    }
}
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }
    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
}
