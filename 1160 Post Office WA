package com.company;

import java.io.BufferedInputStream;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        int V = sc.nextInt(), P = sc.nextInt();
        int[] arr = new int[V];
        for (int i = 0; i < V; i++) {
            arr[i] = sc.nextInt();
        }
        int[][][] dp = new int[V + 1][P + 1][2];
        for (int i = 0; i <= V; i++)
            dp[i][0][0] = Integer.MAX_VALUE - 1000000;
        for (int i = 0; i <= P; i++)
            dp[0][i][0] = Integer.MAX_VALUE - 1000000;

        for (int i = 0; i < V; i++) {//可证明 在中点元素的代价一定是最小的
            for (int j = 0; j < i + 1; j++) {
                dp[i + 1][1][0] += Math.abs(arr[j] - arr[i / 2]);
            }
            dp[i + 1][1][1] = i / 2;
        }

        for (int i = 3; i <= V; i++) {
            for (int j = 2; j <= P && j < i; j++) {
                int temp = 0;
                for (int k = dp[i - 1][j - 1][1] + 1; k < i - 1; k++) {
                    if (arr[k] - arr[dp[i - 1][j - 1][1]] > arr[i - 1] - arr[k])//减少的代价
                        temp += (arr[k] - arr[dp[i - 1][j - 1][1]] - (arr[i - 1] - arr[k]));
                }
                int temp1 = (dp[i - 1][j][0] + arr[i - 1] - arr[dp[i - 1][j][1]]);
                int temdsfap1 = dp[i - 1][j - 1][0] - temp;

                if (temp1 < temdsfap1) {//这里不取等于号 尽量往后放
                    dp[i][j][0] = temp1;//不放在第i个的cost, 由第i个产生的cost,相当于对i-1个村庄，j个邮局进行分配
                    dp[i][j][1] = dp[i - 1][j][1];
                }
                else {//放在第i个的cost 相当于对i-1, j - 1个邮局重新分配 要计算减少的代价
                    dp[i][j][0] = temdsfap1;
                    dp[i][j][1] = i - 1;
                }
            }
        }
        System.out.println(dp[V][P][0]);
    }
}
